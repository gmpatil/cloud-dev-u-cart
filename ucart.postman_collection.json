{
	"info": {
		"_postman_id": "aa54ccf6-5e9c-405d-9ad0-fad5d65a387b",
		"name": "UCart-REST-API-Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "01_Common_AWS_And_Local",
			"item": [
				{
					"name": "00_TruncateTables",
					"item": [
						{
							"name": "01_DDBTablesTruncateNoAuth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0e6c64d-852d-4e5e-8ec1-c9f8c2ed8b5b",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"// pm.test(\"The post returns list has no item\", function () {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.items.length).to.equal(0);          ",
											"// });",
											"",
											"pm.test(\"Response time is less than 4900ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(4900);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{UserAuthToken}}"
									}
								],
								"url": {
									"raw": "{{HostPrefix}}/ddtables/",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"ddtables",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "02_DDBTablesTruncate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82ebae23-d2b5-4762-bda4-b09ba66ecdc5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// pm.test(\"The post returns list has no item\", function () {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.items.length).to.equal(0);          ",
											"// });",
											"",
											"pm.test(\"Response time is less than 25000ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(25000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AdminAuthToken}}"
									}
								],
								"url": {
									"raw": "{{HostPrefix}}/ddtables",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"ddtables"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "01_Users",
					"item": [
						{
							"name": "00_UserCreateAdminNotAuth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69c52d51-59a9-4005-979f-4c811864c7db",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"// pm.test(\"The post returns list has no item\", function () {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.items.length).to.equal(0);          ",
											"// });",
											"",
											"pm.test(\"Response time is less than 6000ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(6000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{UserAuthToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": \"auth0|5f31c210022f3a003d37ad02\",\r\n    \"name\": \"admin@test.com\",\r\n    \"contactPhone\": \"888-123-4567\",\r\n    \"address\": {\r\n        \"addressLine1\": \"\",\r\n        \"addressLine2\": \"\",\r\n        \"city\": \"San Fransisco\",\r\n        \"zip\": \"900123\",\r\n        \"state\": \"ca\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HostPrefix}}/user",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "01_UserCreateAdmin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36b6d4b2-bc99-440a-9f98-c7e0ae227653",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// pm.test(\"The post returns list has no item\", function () {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.items.length).to.equal(0);          ",
											"// });",
											"",
											"pm.test(\"Response time is less than 6000ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(6000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AdminAuthToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": \"auth0|5f31c210022f3a003d37ad02\",\r\n    \"name\": \"admin@test.com\",\r\n    \"contactPhone\": \"888-123-4567\",\r\n    \"address\": {\r\n        \"addressLine1\": \"\",\r\n        \"addressLine2\": \"\",\r\n        \"city\": \"San Fransisco\",\r\n        \"zip\": \"900123\",\r\n        \"state\": \"ca\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HostPrefix}}/user",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "02_UserGetAdminNoAuth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "93c3d659-93ce-447f-bdc0-ae7e41e219b0",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"// pm.test(\"The post returns list has no item\", function () {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.items.length).to.equal(0);          ",
											"// });",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{UserAuthToken}}"
									}
								],
								"url": {
									"raw": "{{HostPrefix}}/user?userId=auth0%7C5f31c210022f3a003d37ad02",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"user"
									],
									"query": [
										{
											"key": "userId",
											"value": "auth0%7C5f31c210022f3a003d37ad02",
											"description": "Admin user's Id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "02_UserGetUserEmpty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19d761b3-4e25-4cac-8a5a-6436b6cdff12",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"// pm.test(\"The post returns list has no item\", function () {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.items.length).to.equal(0);          ",
											"// });",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{UserAuthToken}}"
									}
								],
								"url": {
									"raw": "{{HostPrefix}}/user",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "03_UserCreateUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "939985b1-2296-4bf8-b1c4-611d9bd7e166",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// pm.test(\"The post returns list has no item\", function () {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.items.length).to.equal(0);          ",
											"// });",
											"",
											"pm.test(\"Response time is less than 6000ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(6000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{UserAuthToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": \"auth0|5f31c2ea8817010037fdcf73\",\r\n    \"name\": \"user@test.com\",\r\n    \"contactPhone\": \"888-123-4568\",\r\n    \"address\": {\r\n        \"addressLine1\": \"1234 El Camino Real\",\r\n        \"addressLine2\": \"\",\r\n        \"city\": \"Santa Clara\",\r\n        \"zip\": \"900125\",\r\n        \"state\": \"ca\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HostPrefix}}/user",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "04_UserGetUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79e58a3b-6959-44ea-b5d0-ec99d315fb3e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The returned User object has same userId\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.user.userId).to.equal(\"auth0|5f31c2ea8817010037fdcf73\");          ",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{UserAuthToken}}"
									}
								],
								"url": {
									"raw": "{{HostPrefix}}/user",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "06_UserUpdateUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e7cfea4-2b5e-4a30-b106-30a9925b0cb0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The returned User object has same userId\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.user.userId).to.equal(\"auth0|5f31c2ea8817010037fdcf73\");          ",
											"});",
											"",
											"pm.test(\"The returned User object has update to contact phone\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.user.contactPhone).to.equal(\"888-123-4567\");          ",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{UserAuthToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": \"auth0|5f31c2ea8817010037fdcf73\",\r\n    \"userNum\": 2,\r\n    \"name\": \"user@test.com\",\r\n    \"contactPhone\": \"888-123-4567\",\r\n    \"address\": {\r\n        \"addressLine1\": \"1234 El Camino Real\",\r\n        \"addressLine2\": \"\",\r\n        \"city\": \"Santa Clara\",\r\n        \"zip\": \"900125\",\r\n        \"state\": \"ca\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HostPrefix}}/user",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "05_UserUpdateAdminNoAuth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b40ad8f-717d-47ce-a180-b57b787c26f1",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{UserAuthToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": \"auth0|5f31c210022f3a003d37ad02\",\r\n    \"userNum\": 1,\r\n    \"name\": \"admin@test.com\",\r\n    \"contactPhone\": \"888-123-4567\",\r\n    \"address\": {\r\n        \"addressLine1\": \"\",\r\n        \"addressLine2\": \"\",\r\n        \"city\": \"San Fransisco\",\r\n        \"zip\": \"900123\",\r\n        \"state\": \"ca\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HostPrefix}}/user",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "02_Stores",
					"item": [
						{
							"name": "00_StoreCreateStore1NoAuth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "702f83f5-a802-4919-bbf4-a55b5dd73644",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"// pm.test(\"The post returns list has no item\", function () {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.items.length).to.equal(0);          ",
											"// });",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{UserAuthToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Super King Grocers\",\r\n    \"desc\": \"Bay Area's Fastest Growing Grocer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HostPrefix}}/store",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"store"
									]
								}
							},
							"response": []
						},
						{
							"name": "01_StoreCreateStore1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2c67246-ad7c-41ce-b83d-3330b3b15fc8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// pm.test(\"The post returns list has no item\", function () {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.items.length).to.equal(0);          ",
											"// });",
											"",
											"pm.test(\"Response time is less than 1400ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(1400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AdminAuthToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Super King Grocers\",\r\n    \"desc\": \"Bay Area's Fastest Growing Grocer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HostPrefix}}/store",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"store"
									]
								}
							},
							"response": []
						},
						{
							"name": "02_StoreCreateStore2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb3a5fd5-c690-49b9-a9d1-a3f3ec48cd92",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// pm.test(\"The post returns list has no item\", function () {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.items.length).to.equal(0);          ",
											"// });",
											"",
											"pm.test(\"Response time is less than 1400ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(1400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AdminAuthToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Ralphy General Stores\",\r\n    \"desc\": \"East Bay's Superfast Growing Store\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HostPrefix}}/store",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"store"
									]
								}
							},
							"response": []
						},
						{
							"name": "03_StoreUpdateStore2NoAuth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "62078eb4-1d19-4a08-9c8c-ea02a24f081a",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"// pm.test(\"The post returns list has no item\", function () {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.items.length).to.equal(0);          ",
											"// });",
											"",
											"pm.test(\"Response time is less than 2000ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{UserAuthToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"storeNum\": 1,\r\n    \"name\": \"Ralphy General Stores\",\r\n    \"desc\": \"East Bay's Superfast Growing Store\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HostPrefix}}/store",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"store"
									]
								}
							},
							"response": []
						},
						{
							"name": "03_StoreUpdateStore2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4de88ed2-a782-419f-b02e-ce4b70c68962",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// pm.test(\"The post returns list has no item\", function () {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.items.length).to.equal(0);          ",
											"// });",
											"",
											"pm.test(\"Response time is less than 2000ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AdminAuthToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"storeNum\": 1,\r\n    \"name\": \"Ralphy General Stores\",\r\n    \"desc\": \"East Bay's Superfast Growing Store1111\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HostPrefix}}/store",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"store"
									]
								}
							},
							"response": []
						},
						{
							"name": "04_StoreGetStore1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3880cc78-9d66-48e1-8e3f-29097838eab7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The post returns storeNum 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.store.storeNum).to.equal(1);          ",
											"});",
											"",
											"pm.test(\"The post returns name, desc, createdAt, lastUpdatedAt\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.store.name);          ",
											"    pm.expect(jsonData.store.desc);              ",
											"    pm.expect(jsonData.store.createdAt);              ",
											"    pm.expect(jsonData.store.lastUpdatedAt);",
											"    ",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{UserAuthToken}}"
									}
								],
								"url": {
									"raw": "{{HostPrefix}}/store/1",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"store",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "05_StoreGetStores",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c9a2f0d-9cbe-4962-bb09-534a3a8af14f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The post returns 2 stores\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.stores.length).to.equal(2);          ",
											"});",
											"",
											"// pm.test(\"StoreNum 1 and 2 is returned\", function () {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.stores[0].storeNum).to.equal(1);          ",
											"// });",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{UserAuthToken}}"
									}
								],
								"url": {
									"raw": "{{HostPrefix}}/store/",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"store",
										""
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "03_Items",
					"item": [
						{
							"name": "00_ItemCreateS1I1NoAuth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a87d64ba-1bf6-4a26-a18f-a44e0145d6d0",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"// pm.test(\"The post returns list has no item\", function () {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.items.length).to.equal(0);          ",
											"// });",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{UserAuthToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"storeNum\" : 1,\r\n      \"name\":\"Red Onions\",\r\n      \"desc\": \"Red Onions\",\r\n      \"unitType\": \"lb\",\r\n      \"minIncrement\": 0.25,\r\n      \"minUnits\": 1,      \r\n      \"maxUnits\": 100,\r\n      \"price\": 3,\r\n      \"active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HostPrefix}}/store/1/item",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"store",
										"1",
										"item"
									]
								}
							},
							"response": []
						},
						{
							"name": "01_ItemCreateS1I1Red Onions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f713418-5163-440b-934d-75f574c4db06",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// pm.test(\"The post returns list has no item\", function () {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.items.length).to.equal(0);          ",
											"// });",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AdminAuthToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"storeNum\" : 1,\r\n      \"name\":\"Red Onions\",\r\n      \"desc\": \"Red Onions\",\r\n      \"unitType\": \"lb\",\r\n      \"minIncrement\": 0.25,\r\n      \"minUnits\": 1,      \r\n      \"maxUnits\": 100,\r\n      \"price\": 3,\r\n      \"active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HostPrefix}}/store/1/item/",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"store",
										"1",
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "02_ItemCreateS1I2Green Onions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d3c867b-659b-4743-8c04-351954fb6025",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// pm.test(\"The post returns list has no item\", function () {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.items.length).to.equal(0);          ",
											"// });",
											"",
											"pm.test(\"Response time is less than 2000 ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AdminAuthToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"storeNum\" : 1,\r\n      \"name\":\"Green Onions\",\r\n      \"desc\": \"Green Onions(Scallions bunch)\",\r\n      \"unitType\": \"num\",\r\n      \"minIncrement\": 1,\r\n      \"minUnits\": 1,      \r\n      \"maxUnits\": 100,\r\n      \"price\": 0.15,\r\n      \"active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HostPrefix}}/store/1/item/",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"store",
										"1",
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "03_ItemCreateS1I3Cauliflower",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10cd6f0a-7802-4b40-a72b-e5b7c301ecaf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// pm.test(\"The post returns list has no item\", function () {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.items.length).to.equal(0);          ",
											"// });",
											"",
											"pm.test(\"Response time is less than 2000 ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AdminAuthToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"storeNum\" : 1,\r\n      \"name\":\"Cauliflower\",\r\n      \"desc\": \"Cauliflower\",\r\n      \"unitType\": \"lb\",\r\n      \"minIncrement\": 0.10,\r\n      \"minUnits\": 1,      \r\n      \"maxUnits\": 100,\r\n      \"price\": 0.95,\r\n      \"active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HostPrefix}}/store/1/item/",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"store",
										"1",
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "04_ItemCreateS1I4Green Bell Pepper",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1f2e47c-8791-426e-8852-d1ff3b20a74f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// pm.test(\"The post returns list has no item\", function () {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.items.length).to.equal(0);          ",
											"// });",
											"",
											"pm.test(\"Response time is less than 2000ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AdminAuthToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"storeNum\" : 1,\r\n      \"name\":\"Green Bell Pepper\",\r\n      \"desc\": \"Green Bell Pepper\",\r\n      \"unitType\": \"num\",\r\n      \"minIncrement\": 1,\r\n      \"minUnits\": 1,      \r\n      \"maxUnits\": 100,\r\n      \"price\": 0.59,\r\n      \"active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HostPrefix}}/store/1/item/",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"store",
										"1",
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "05_ItemCreateS1I5Tomato",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c993445b-631b-4414-a3ec-25648501a4dd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// pm.test(\"The post returns list has no item\", function () {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.items.length).to.equal(0);          ",
											"// });",
											"",
											"pm.test(\"Response time is less than 2000 ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AdminAuthToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"storeNum\" : 1,\r\n      \"name\":\"Tomato\",\r\n      \"desc\": \"Tomato\",\r\n      \"unitType\": \"num\",\r\n      \"minIncrement\": 1,\r\n      \"minUnits\": 1,      \r\n      \"maxUnits\": 100,\r\n      \"price\": 0.45,\r\n      \"active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HostPrefix}}/store/1/item/",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"store",
										"1",
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "06_ItemCreateS1I6Cilantro",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aefcf260-1a7b-4003-8d37-1c2df792c3ae",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// pm.test(\"The post returns list has no item\", function () {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.items.length).to.equal(0);          ",
											"// });",
											"",
											"pm.test(\"Response time is less than 2000 ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AdminAuthToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"storeNum\" : 1,\r\n      \"name\":\"Cilantro\",\r\n      \"desc\": \"Cilantro bunch\",\r\n      \"unitType\": \"num\",\r\n      \"minIncrement\": 1,\r\n      \"minUnits\": 1,      \r\n      \"maxUnits\": 100,\r\n      \"price\": 0.19,\r\n      \"active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HostPrefix}}/store/1/item/",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"store",
										"1",
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "07_ItemCreateS1I7Carrot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e708f51-6760-4ea3-8bcc-ba6d096818fb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// pm.test(\"The post returns list has no item\", function () {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.items.length).to.equal(0);          ",
											"// });",
											"",
											"pm.test(\"Response time is less than 2000 ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AdminAuthToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"storeNum\" : 1,\r\n      \"name\":\"Carrot Bunch\",\r\n      \"desc\": \"Carrot Bunch\",\r\n      \"unitType\": \"num\",\r\n      \"minIncrement\": 1,\r\n      \"minUnits\": 1,      \r\n      \"maxUnits\": 100,\r\n      \"price\": 1.05,\r\n      \"active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HostPrefix}}/store/1/item/",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"store",
										"1",
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "08_ItemCreateS1I8OrgBrownEggs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "72ed7182-87f3-409e-b4d3-33c253e7a1b1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// pm.test(\"The post returns list has no item\", function () {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.items.length).to.equal(0);          ",
											"// });",
											"",
											"pm.test(\"Response time is less than 2000 ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AdminAuthToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"storeNum\" : 1,\r\n      \"name\":\"Organic Cage Free Grade A Brown Eggs Large\",\r\n      \"desc\": \"Organic Cage Free Grade A Brown Eggs Large\",\r\n      \"unitType\": \"dozen\",\r\n      \"minIncrement\": 1,\r\n      \"minUnits\": 1,      \r\n      \"maxUnits\": 10,\r\n      \"price\": 5.55,\r\n      \"active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HostPrefix}}/store/1/item/",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"store",
										"1",
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "09_ItemUpdateItemS1I7NoAuth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1dedf1bd-dae1-4f26-a14c-4e84c5ae56e1",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"// pm.test(\"The post returns list has no item\", function () {",
											"//     var jsonData = pm.response.json();",
											"//     pm.expect(jsonData.items.length).to.equal(0);          ",
											"// });",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{UserAuthToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"name\":\"Carrot Bunch\",\r\n      \"desc\": \"Carrot Bunch\",\r\n      \"unitType\": \"num\",\r\n      \"minIncrement\": 1,\r\n      \"minUnits\": 1,      \r\n      \"maxUnits\": 100,\r\n      \"price\": 1.05,\r\n      \"active\": true\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HostPrefix}}/store/1/item/7",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"store",
										"1",
										"item",
										"7"
									]
								}
							},
							"response": []
						},
						{
							"name": "10_ItemUpdateUpdateItemS1I7Carrot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de6fd25d-75c6-468f-83a0-ce9a447fc473",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The post returns list has no item\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.item.price).to.equal(0.99);          ",
											"});",
											"",
											"pm.test(\"Response time is less than 2000 ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AdminAuthToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{        \r\n      \"name\":\"Carrot Bunch\",\r\n      \"desc\": \"Carrot Bunch\",\r\n      \"unitType\": \"num\",\r\n      \"minIncrement\": 1,\r\n      \"minUnits\": 1,      \r\n      \"maxUnits\": 100,\r\n      \"price\": 0.99,\r\n      \"active\": true\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HostPrefix}}/store/1/item/7",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"store",
										"1",
										"item",
										"7"
									]
								}
							},
							"response": []
						},
						{
							"name": "11_ItemGetItemByNum1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b56916c1-40f4-444d-a3a2-bf97109a115f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The post returns storeNum, itemNum, price \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.item.storeNum).to.equal(1);          ",
											"    //pm.expect(jsonData.item.itemNum).to.equal(7);              ",
											"    //pm.expect(jsonData.item.itemId).to.equal(\"i-00001-0000000007\");  ",
											"    pm.expect(jsonData.item).to.have.property(\"lastUpdatedAt\");  ",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response time is less than 2000 ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{UserAuthToken}}"
									}
								],
								"url": {
									"raw": "{{HostPrefix}}/store/1/item/1",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"store",
										"1",
										"item",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "11_ItemGetItemByNum7",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b678c0e3-6481-4de3-a7f3-0e511e3cf906",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The post returns storeNum, itemNum, price \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.item.storeNum).to.equal(1);          ",
											"    pm.expect(jsonData.item.itemNum).to.equal(7);              ",
											"    pm.expect(jsonData.item.itemId).to.equal(\"i-00001-0000000007\");  ",
											"    pm.expect(jsonData.item).to.have.property(\"lastUpdatedAt\");  ",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response time is less than 2000 ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{UserAuthToken}}"
									}
								],
								"url": {
									"raw": "{{HostPrefix}}/store/1/item/7",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"store",
										"1",
										"item",
										"7"
									]
								}
							},
							"response": []
						},
						{
							"name": "12_ItemGetItemById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db6c6cdb-2ed6-4bfa-b517-a4ef3723b8fb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The post returns storeNum, itemNum, price \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.item.storeNum).to.equal(1);          ",
											"    pm.expect(jsonData.item.itemNum).to.equal(7);              ",
											"    pm.expect(jsonData.item.itemId).to.equal(\"i-00001-0000000007\");  ",
											"    pm.expect(jsonData.item).to.have.property(\"lastUpdatedAt\");  ",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response time is less than 3000 ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{UserAuthToken}}"
									}
								],
								"url": {
									"raw": "{{HostPrefix}}/storeItem/i-00001-0000000007",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"storeItem",
										"i-00001-0000000007"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "04_Cart",
					"item": [
						{
							"name": "01_CreateCart",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b74d60d-50ea-4bb9-a54e-455f3e6a6eda",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The post returns list has 3 item\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.cart.items.length).to.equal(3);          ",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{UserAuthToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"itms\": [\r\n        {\r\n        \"itemId\" : \"i-00001-0000000001\",\r\n        \"name\": \"Red Onions\",        \r\n        \"unitType\" : \"lb\",\r\n        \"unitPrice\": 3,\r\n        \"qty\": 2,        \r\n        \"price\": 6\r\n        },\r\n        {\r\n        \"itemId\": \"i-00001-0000000002\",            \r\n        \"name\": \"Green Onions\",         \r\n        \"unitType\": \"num\",\r\n        \"unitPrice\": 0.15,\r\n        \"qty\": 2,        \r\n        \"price\": 0.30\r\n        },\r\n        {\r\n        \"unitType\": \"lb\",\r\n        \"itemId\": \"i-00001-0000000003\",\r\n        \"unitPrice\": 0.95,\r\n        \"name\": \"Cauliflower\",\r\n        \"qty\": 2,        \r\n        \"price\": 1.90\r\n        }        \r\n    ],\r\n    \"totalAmt\": 8.20\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HostPrefix}}/store/1/cart",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"store",
										"1",
										"cart"
									]
								}
							},
							"response": []
						},
						{
							"name": "02_GetCart",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48550d74-7d1d-4727-82ac-ad98576e9f0c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The post returns storeNum 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.cart.storeNum).to.equal(1);",
											"});",
											"",
											"pm.test(\"The post returns name, desc, createdAt, lastUpdatedAt\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.cart).to.have.property(\"userId\");",
											"    pm.expect(jsonData.cart).to.have.property(\"items\");",
											"    pm.expect(jsonData.cart.items).to.have.length(3);",
											"    pm.expect(jsonData.cart).to.have.property(\"totalPrice\");    ",
											"    pm.expect(jsonData.cart).to.have.property(\"lastUpdatedAt\");",
											"",
											"",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{UserAuthToken}}"
									}
								],
								"url": {
									"raw": "{{HostPrefix}}/store/1/cart",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"store",
										"1",
										"cart"
									]
								}
							},
							"response": []
						},
						{
							"name": "03_UpdateCart",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4adf5da9-ca4e-4675-91f2-562da94928d3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The post returns storeNum 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.cart.storeNum).to.equal(1);",
											"});",
											"",
											"pm.test(\"The post returns name, desc, createdAt, lastUpdatedAt\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.cart).to.have.property(\"userId\");",
											"    pm.expect(jsonData.cart).to.have.property(\"items\");",
											"    pm.expect(jsonData.cart.items).to.have.length(4);",
											"    pm.expect(jsonData.cart).to.have.property(\"totalPrice\");    ",
											"    pm.expect(jsonData.cart).to.have.property(\"lastUpdatedAt\");",
											"",
											"",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{UserAuthToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"itms\": [\r\n        {\r\n        \"itemId\" : \"i-00001-0000000001\",\r\n        \"name\": \"Red Onions\",        \r\n        \"unitType\" : \"lb\",\r\n        \"unitPrice\": 3,\r\n        \"qty\": 2,        \r\n        \"price\": 6\r\n        },\r\n        {\r\n        \"itemId\": \"i-00001-0000000002\",            \r\n        \"name\": \"Green Onions\",         \r\n        \"unitType\": \"num\",\r\n        \"unitPrice\": 0.15,\r\n        \"qty\": 2,        \r\n        \"price\": 0.30\r\n        },\r\n        {\r\n        \"unitType\": \"lb\",\r\n        \"itemId\": \"i-00001-0000000003\",\r\n        \"unitPrice\": 0.95,\r\n        \"name\": \"Cauliflower\",\r\n        \"qty\": 2,        \r\n        \"price\": 1.90\r\n        },\r\n        {\r\n        \"unitType\": \"num\",\r\n        \"itemId\": \"i-00001-0000000005\",\r\n        \"unitPrice\": 0.45,\r\n        \"name\": \"Tomato\",\r\n        \"qty\": 5,        \r\n        \"price\": 2.25\r\n        }                \r\n    ],\r\n    \"totalAmt\": 10.45\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HostPrefix}}/store/1/cart",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"store",
										"1",
										"cart"
									]
								}
							},
							"response": []
						},
						{
							"name": "04_GetCart",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5972743f-8bae-4e66-b7a4-a2c2447d0073",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The post returns storeNum 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.cart.storeNum).to.equal(1);          ",
											"});",
											"",
											"pm.test(\"The post returns name, desc, createdAt, lastUpdatedAt\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.cart).to.have.property(\"userId\");",
											"    pm.expect(jsonData.cart).to.have.property(\"items\");",
											"    pm.expect(jsonData.cart.items).to.have.length(4);",
											"    pm.expect(jsonData.cart).to.have.property(\"totalPrice\");    ",
											"    pm.expect(jsonData.cart).to.have.property(\"lastUpdatedAt\");",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{UserAuthToken}}"
									}
								],
								"url": {
									"raw": "{{HostPrefix}}/store/1/cart",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"store",
										"1",
										"cart"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "05_Order",
					"item": [
						{
							"name": "01_CreateOrder",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12e0d776-4c6f-42c6-9565-c8d407284b7f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The post returns list has no item\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.order.storeNum).to.equal(1);    ",
											"",
											"    pm.expect(jsonData.order).to.have.property(\"userId\");",
											"    pm.expect(jsonData.order).to.have.property(\"items\");",
											"    pm.expect(jsonData.order.items).to.have.length(3);",
											"    pm.expect(jsonData.order).to.have.property(\"totalPrice\");    ",
											"    pm.expect(jsonData.order).to.have.property(\"lastUpdatedAt\");               ",
											"    pm.expect(jsonData.order).to.have.property(\"gsi1pk\");                   ",
											"});",
											"",
											"pm.test(\"Response time is less than 4000ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{UserAuthToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"itms\": [\r\n        {\r\n        \"itemId\" : \"i-00001-0000000001\",\r\n        \"name\": \"Red Onions\",        \r\n        \"unitType\" : \"lb\",\r\n        \"unitPrice\": 3,\r\n        \"qty\": 2,        \r\n        \"price\": 6\r\n        },\r\n        {\r\n        \"itemId\": \"i-00001-0000000002\",            \r\n        \"name\": \"Green Onions\",         \r\n        \"unitType\": \"num\",\r\n        \"unitPrice\": 0.15,\r\n        \"qty\": 2,        \r\n        \"price\": 0.30\r\n        },\r\n        {\r\n        \"unitType\": \"lb\",\r\n        \"itemId\": \"i-00001-0000000003\",\r\n        \"unitPrice\": 0.95,\r\n        \"name\": \"Cauliflower\",\r\n        \"qty\": 2,        \r\n        \"price\": 1.90\r\n        }        \r\n    ],\r\n    \"totalAmt\": 8.20\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HostPrefix}}/store/1/order",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"store",
										"1",
										"order"
									]
								}
							},
							"response": []
						},
						{
							"name": "02_GetOrderByIdNoAuth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8dc0ae49-f3f0-4635-ba30-df7a9416e231",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 2000ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{UserAuthToken}}"
									}
								],
								"url": {
									"raw": "{{HostPrefix}}/order/00001-0000000003",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"order",
										"00001-0000000003"
									]
								}
							},
							"response": []
						},
						{
							"name": "03_GetOrderById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12a6f407-67b2-49a5-b15b-1a267112cb2f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The post returns storeNum 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.order.storeNum).to.equal(1);",
											"});",
											"",
											"pm.test(\"The post returns name, desc, createdAt, lastUpdatedAt\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.order).to.have.property(\"userId\");",
											"    pm.expect(jsonData.order).to.have.property(\"items\");",
											"    pm.expect(jsonData.order.items).to.have.length(3);",
											"    pm.expect(jsonData.order).to.have.property(\"totalPrice\");    ",
											"    pm.expect(jsonData.order).to.have.property(\"lastUpdatedAt\");",
											"",
											"",
											"});",
											"",
											"pm.test(\"Response time is less than 5000ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AdminAuthToken}}"
									}
								],
								"url": {
									"raw": "{{HostPrefix}}/order/00001-0000000001",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"order",
										"00001-0000000001"
									]
								}
							},
							"response": []
						},
						{
							"name": "04_GetOrderForUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16c70ea9-d58f-48b9-ae0f-0746f260e2a4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The post returns storeNum 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.orders[0].storeNum).to.equal(1);",
											"});",
											"",
											"pm.test(\"The post returns name, desc, createdAt, lastUpdatedAt\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.orders[0]).to.have.property(\"userId\");",
											"    pm.expect(jsonData.orders[0]).to.have.property(\"items\");",
											"    pm.expect(jsonData.orders[0].items).to.have.length(3);",
											"    pm.expect(jsonData.orders[0]).to.have.property(\"totalPrice\");    ",
											"    pm.expect(jsonData.orders[0]).to.have.property(\"lastUpdatedAt\");",
											"",
											"",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{UserAuthToken}}"
									}
								],
								"url": {
									"raw": "{{HostPrefix}}/user/order?status=CREATED",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"user",
										"order"
									],
									"query": [
										{
											"key": "status",
											"value": "CREATED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "05_GetOrderForStoreNoAuth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39211c3c-5f64-40b1-acb0-c4e35f7ecd01",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{UserAuthToken}}"
									}
								],
								"url": {
									"raw": "{{HostPrefix}}/store/1/order?status=CREATED",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"store",
										"1",
										"order"
									],
									"query": [
										{
											"key": "status",
											"value": "CREATED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "06_GetOrderForStore",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5f63ca0-354c-4f66-9180-f0b6166692a1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The post returns storeNum 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.orders[0].storeNum).to.equal(1);",
											"});",
											"",
											"pm.test(\"The post returns name, desc, createdAt, lastUpdatedAt\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.orders[0]).to.have.property(\"userId\");",
											"    pm.expect(jsonData.orders[0]).to.have.property(\"items\");",
											"    pm.expect(jsonData.orders[0].items).to.have.length(3);",
											"    pm.expect(jsonData.orders[0]).to.have.property(\"totalPrice\");    ",
											"    pm.expect(jsonData.orders[0]).to.have.property(\"lastUpdatedAt\");",
											"",
											"",
											"});",
											"",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AdminAuthToken}}"
									}
								],
								"url": {
									"raw": "{{HostPrefix}}/store/1/order?status=CREATED",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"store",
										"1",
										"order"
									],
									"query": [
										{
											"key": "status",
											"value": "CREATED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "07_UpdateOrderNoAuth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c7a5264-2038-4313-a608-697c1a13bc54",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response time is less than 2500ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(2500);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{UserAuthToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"itms\": [\r\n        {\r\n        \"itemId\" : \"i-00001-0000000001\",\r\n        \"name\": \"Red Onions\",        \r\n        \"unitType\" : \"lb\",\r\n        \"unitPrice\": 3,\r\n        \"qty\": 2,        \r\n        \"price\": 6\r\n        },\r\n        {\r\n        \"itemId\": \"i-00001-0000000002\",            \r\n        \"name\": \"Green Onions\",         \r\n        \"unitType\": \"num\",\r\n        \"unitPrice\": 0.15,\r\n        \"qty\": 2,        \r\n        \"price\": 0.30\r\n        },\r\n        {\r\n        \"unitType\": \"lb\",\r\n        \"itemId\": \"i-00001-0000000003\",\r\n        \"unitPrice\": 0.95,\r\n        \"name\": \"Cauliflower\",\r\n        \"qty\": 2,        \r\n        \"price\": 1.90\r\n        },\r\n        {\r\n        \"unitType\": \"num\",\r\n        \"itemId\": \"i-00001-0000000005\",\r\n        \"unitPrice\": 0.45,\r\n        \"name\": \"Tomato\",\r\n        \"qty\": 5,        \r\n        \"price\": 2.25\r\n        }                \r\n    ],\r\n    \"totalAmt\": 10.45\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HostPrefix}}/order/00001-0000000001?status=PROCESSED",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"order",
										"00001-0000000001"
									],
									"query": [
										{
											"key": "status",
											"value": "PROCESSED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "08_UpdateOrder",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce7a3f1e-b66f-4874-b5bc-e3603217c9b0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The post returns storeNum 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.order.storeNum).to.equal(1);",
											"});",
											"",
											"pm.test(\"The post returns name, desc, createdAt, lastUpdatedAt\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.order).to.have.property(\"userId\");",
											"    pm.expect(jsonData.order).to.have.property(\"items\");",
											"    pm.expect(jsonData.order.items).to.have.length(3);",
											"    pm.expect(jsonData.order).to.have.property(\"totalPrice\");    ",
											"    pm.expect(jsonData.order).to.have.property(\"status\");        ",
											"    pm.expect(jsonData.order.status).to.equal(\"PROCESSED\");    ",
											"    pm.expect(jsonData.order).to.have.property(\"lastUpdatedAt\");",
											"});",
											"",
											"pm.test(\"Response time is less than 2000 ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AdminAuthToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HostPrefix}}/order/00001-0000000001?status=PROCESSED",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"order",
										"00001-0000000001"
									],
									"query": [
										{
											"key": "status",
											"value": "PROCESSED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "09_GetOrderById",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaed37e8-babd-42f4-9546-4b169feedd8d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The post returns storeNum 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.order.storeNum).to.equal(1);",
											"});",
											"",
											"pm.test(\"The post returns name, desc, createdAt, lastUpdatedAt\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.order).to.have.property(\"userId\");",
											"    pm.expect(jsonData.order).to.have.property(\"items\");",
											"    pm.expect(jsonData.order.items).to.have.length(3);",
											"    pm.expect(jsonData.order).to.have.property(\"totalPrice\");    ",
											"    pm.expect(jsonData.order).to.have.property(\"lastUpdatedAt\");",
											"    pm.expect(jsonData.order).to.have.property(\"status\");",
											"    pm.expect(jsonData.order.status).to.equal(\"PROCESSED\");",
											"});",
											"",
											"pm.test(\"Response time is less than 2000 ms\", function () {",
											"    //after warm start.",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{AdminAuthToken}}"
									}
								],
								"url": {
									"raw": "{{HostPrefix}}/order/00001-0000000001",
									"host": [
										"{{HostPrefix}}"
									],
									"path": [
										"order",
										"00001-0000000001"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Tests common for both AWS and SLS Offline. \r\nUse appropriate environment.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a8700880-c03d-426d-9d44-a81722201435",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7a37f142-504c-4a4a-af04-371b80e699e2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "48fe39e8-94ec-40df-a192-e46bc78a8a81",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "7f97a555-e9e7-443d-b6cb-a6d5a9ce1e52",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "c5387307-9de3-4ca1-bcbf-75c4335d91bb",
			"key": "apiId",
			"value": "",
			"type": "string"
		},
		{
			"id": "6b2c5ace-d52e-4094-b3cf-784f62ebdd12",
			"key": "authToken",
			"value": "",
			"type": "string"
		},
		{
			"id": "adbe20d9-d0cd-4f76-8bc3-32bac2ddb819",
			"key": "Authorization",
			"value": "",
			"type": "string"
		},
		{
			"id": "d6b35364-03e1-470d-9711-f7479eceef63",
			"key": "old_authToken",
			"value": "",
			"type": "string"
		},
		{
			"id": "b9858312-70be-4fed-8ef4-d51ffd5fbfd7",
			"key": "ddddd",
			"value": "",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}