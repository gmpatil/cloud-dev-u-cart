service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-plugin-canary-deployments
  # - serverless-plugin-tracing  
  - serverless-dynamodb-local  
  - serverless-s3-local
  - serverless-offline  
provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  # tracing:
    # lambda: true
    # apiGateway: true

  environment:
    CART_TABLE: cart-${self:provider.stage}      
    ITEM_TABLE: item-${self:provider.stage}    
    ORDER_TABLE: order-${self:provider.stage}    
    SEQ_TABLE: seq-${self:provider.stage}                  
    STORE_TABLE: store-${self:provider.stage}  
    USR_TABLE: user-${self:provider.stage}      
    USR_INDEX: user-index-${self:provider.stage}
    ITEM_IMG_S3_BUCKET: gmp-ucart-img-${self:provider.stage}
    ITEM_IMG_S_S3_BUCKET: gmp-ucart-img-s-${self:provider.stage}    
    SIGNED_URL_EXPIRATION: 300
  #   THUMBNAILS_S3_BUCKET: serverless-udagram-thumbnail-${self:provider.stage}
  #   AUTH_0_SECRET_ID: Auth0Secret-${self:provider.stage}
  #   AUTH_0_SECRET_FIELD: auth0Secret

  iamRoleStatements:
    - Effect: Allow
      Action:
        - codedeploy:*
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODOS_USR_INDEX}
    - Effect: "Allow" 
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"
custom:
  serverless-offline:
    port: 3003
#    useChildProcesses: true    
  dynamodb:
    # noStart: true
    start:
      port: 8000
      inMemory: true
      migrate: true
    seed:
      seqTable:
        sources:
          - table: seq-${self:provider.stage}
            sources: [./tst/seed-seq.json]
    stages:
      - test 
      - dev        
  s3:
    host: localhost
    directory: /tmp

  documentation:
    api:
      info:
        version: v1.0.0
        title: Todo API
        description: Serverless application for Todo API
    models:
      - name: CreateTodoReq
        contentType: application/json
        schema: ${file(models/create-todo-req.json)}
      - name: UpdateTodoReq
        contentType: application/json
        schema: ${file(models/update-todo-req.json)}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true  
          authorizer: Auth          
    iamRoleStatementsInherit: true                      
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODOS_USR_INDEX}
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"  

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true          
          authorizer: Auth                    
          request:
            # Schema that will validate the incoming requests
            schema:
              application/json: ${file(models/create-todo-req.json)}

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true 
          authorizer: Auth                                                 
          request:
            # Schema that will validate the incoming requests
            schema:
              application/json: ${file(models/update-todo-req.json)}
    iamRoleStatementsInherit: true
    iamRoleStatementsName: updateTodoRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true                    
          authorizer: Auth                    
    iamRoleStatementsInherit: true
    iamRoleStatementsName: deleteTodoRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true                    
          authorizer: Auth     
    iamRoleStatementsInherit: true
    iamRoleStatementsName: generateUrlTodoRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}  
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
          
resources:
  Resources:   
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false          

    StoreTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.STORE_TABLE}        
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
          - AttributeName: name
            AttributeType: S
          - AttributeName: desc
            AttributeType: S
          - AttributeName: imageURL
            AttributeType: S            
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    ItemTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ITEM_TABLE}        
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: dueDate
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_USR_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: dueDate
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000    
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket              